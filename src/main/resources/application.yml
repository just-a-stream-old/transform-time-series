server.port: ${API_WEB_SERVER_PORT:7002}

context:
  envName: ${CONTEXT_ENV_NAME:nonprod}
  version: ${CONTEXT_VERSION:v1}

spring:
  # Spring Data JPA
  data.mongodb:
    host: ${REPOSITORY_HOST:localhost}
    port: ${REPOSITORY_PORT:27017}

  # Spring Cloud Stream
  cloud:
    function.definition: generateTimeSeriesDataModel
    stream:
      bindings:
        # Input(s)
        generateTimeSeriesDataModel-in-0:
          destination: ${GENERATE_TIME_SERIES_DATA_MODEL_INPUT_0:eod.nonprod.financial.time_series_1day.ingestion.v1}

      kafka.streams:
        header.traceId: x-trace-id
        bindings:
          generateTimeSeriesDataModel-in-0:
            dlqName: ${GENERATE_TIME_SERIES_DATA_MODEL_DLQ_TOPIC_0}

        binder:
          applicationId: ${GENERATE_TIME_SERIES_DATA_MODEL_APP_ID_0:nonprod_time_series_data_model_in_0_eod_time_series_1day_consumer_0_id_000001}
          brokers: ${KAFKA_BROKER_ADDRESS:localhost:9092}
          deserializationExceptionHandler: ${DESERIALIZATION_EXCEPTION_HANDLER:logAndFail} # Optional: logAndFail, sendToDlq, logAndContinue
          configuration:
            spring.json.trusted.packages: "*"
            # Internal Topics
            replication.factor: ${INTERNAL_TOPIC_REPLICATION_FACTOR:3}
            # Broker Security
            ssl.endpoint.identification.algorithm: ${SECURITY_SSL_ENDPOINT_ID_ALGO}
            sasl.mechanism: ${SECURITY_SASL_MECHANISM}
            security.protocol: ${SECURITY_PROTOCOL}
            sasl.jaas.config: ${SECURITY_SASL_JAAS_CONFIG}
            # SerDes
            default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
            default.value.serde: org.springframework.kafka.support.serializer.JsonSerde
